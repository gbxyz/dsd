#!/usr/bin/perl
# Copyright 2014 CentralNic Ltd. This program is free software; you can
# redistribute it and/or modify it under the same terms as Perl itself.
use Config::Simple;
use File::Basename qw(basename);
use File::Copy qw(move);
use File::Temp qw(tempfile);
use Getopt::Long;
use JSON qw(encode_json);
use Net::DNS::Packet;
use Net::Pcap;
use NetPacket::Ethernet qw(:strip ETH_TYPE_IP ETH_TYPE_IPv6);
use NetPacket::IP qw(:strip :protos);
use NetPacket::IPv6 qw(:strip);
use NetPacket::TCP qw(:strip);
use NetPacket::UDP qw(:strip);
use Pod::Usage;
use POSIX;
use Sys::Hostname;
use Sys::Syslog qw(:standard :macros);
use Time::HiRes qw(time ualarm);
use strict;

openlog('dsd', 'ndelay,perror,pid', LOG_DAEMON);

my $file = '/etc/dsd.conf';
my $foreground;
my $debug;
my $debug_queries;
my $help;
GetOptions(
	'config=s'      => \$file,
	'foreground'    => \$foreground,
	'debug'         => \$debug,
	'debug-queries' => \$debug_queries,
	'help'          => \$help,
);

pod2usage('-verbose' => 99, '-sections' => 'USAGE|OPTIONS') if ($help);

$foreground = $foreground || $debug;

my $config = Config::Simple->new($file)->hashref;

check_config($config) || die("Bad config");

syslog(LOG_DEBUG, "capturing packets on $config->{'dsd.interface'}") if ($debug);
my ($network, $mask, $error);
die($error) unless (0 == Net::Pcap::lookupnet($config->{'dsd.interface'}, \$network, \$mask, \$error));

die($error) unless (my $pcap = Net::Pcap::open_live($config->{'dsd.interface'}, 1500, 0, 1000, \$error));

my $fstr = "src port 53";
syslog(LOG_DEBUG, $fstr) if ($debug);

my $filter;
Net::Pcap::compile($pcap, \$filter, $fstr, 1, 0);
Net::Pcap::setfilter($pcap, $filter);

$SIG{'HUP'} = \&hup_handler;

unless ($foreground) {
	syslog(LOG_DEBUG, "daemonising") if ($debug);
	if (fork() > 0) {
		exit(0);

	} else {
		setsid();
		chdir('/');
		$0 = '[dsd]';

	}
}

my $stats = { 'start' => time() };
init_stats();

my $counter = 0;

syslog(LOG_DEBUG, "entering loop") if ($debug);
Net::Pcap::loop($pcap, -1, \&process_packet, undef);

sub process_packet {
	my (undef, $header, $data) = @_;

	$counter++;
	if (0 == $counter % $config->{'dsd.sample'}) {
		$counter = 0;

	} else {
		return;

	}

	my ($eth, $ip, $family, $dns, $proto, $q);
	eval {
		$eth = NetPacket::Ethernet->decode($data);
		return unless (defined($eth));

		if ($eth->{'type'} eq ETH_TYPE_IP) {
			$family = 4;
			$ip = NetPacket::IP->decode(eth_strip($data));

		} elsif ($eth->{'type'} eq ETH_TYPE_IPv6) {
			$family = 6;
			$ip = NetPacket::IPv6->decode(eth_strip($data));

		} else {
			return;

		}

		if ($ip->{'proto'} == IP_PROTO_TCP) {
			my $tcp = NetPacket::TCP->decode($ip->{'data'});
			return unless (defined($tcp));

			# the first two bytes encode the packet length, remove:
			my $data = substr($tcp->{'data'}, 2);

			$dns = Net::DNS::Packet->new(\$data);

			$proto = 'tcp';

		} elsif ($ip->{'proto'} == IP_PROTO_UDP) {
			my $udp = NetPacket::UDP->decode($ip->{'data'});
			return unless (defined($udp));

			$dns = Net::DNS::Packet->new(\$udp->{'data'});

			$proto = 'udp';

		}

		return unless (defined($dns));

		$q = ($dns->question)[0];
		return unless (defined($q));
	};

	if ($@) {
		chomp($@);
		syslog(LOG_INFO, $@);
		return;

	} elsif (!defined($q)) {
		return;

	} else {
		syslog(LOG_DEBUG, $q->string) if ($debug && $debug_queries);
		my $qname = eval { $q->qname };
		my $qtype = eval { $q->qtype };

		my $zone = (
			reverse
			sort { length($a) <=> length($b) }
			grep { lc($_) eq lc($qname) || $qname =~ /\.$_$/i }
			get_zones()
		)[0] || 'other';

		my $rcode = eval { $dns->header->rcode } || 'SERVFAIL';

		$stats->{'zones'}->{$zone}->{'queries'}             += $config->{'dsd.sample'};
		$stats->{'zones'}->{$zone}->{'families'}->{$family} += $config->{'dsd.sample'};
		$stats->{'zones'}->{$zone}->{'protos'}->{$proto}    += $config->{'dsd.sample'};
		$stats->{'zones'}->{$zone}->{'rcodes'}->{$rcode}    += $config->{'dsd.sample'};
		$stats->{'zones'}->{$zone}->{'qtypes'}->{$qtype}    += $config->{'dsd.sample'};

		if (time() - $stats->{'start'} >= $config->{'dsd.interval'}) {
			$stats->{'end'} = time();
			my ($fh, $file) = tempfile('SUFFIX' => '.js');
			$fh->print(encode_json($stats));
			$fh->close;
			my $dest = $config->{'dsd.directory'}.'/'.basename($file);
			if (!move($file, $dest)) {
				syslog(LOG_CRIT, "error renaming $file to $dest: $!");
				exit(1);

			} else {
				init_stats();
				syslog(LOG_DEBUG, "wrote data to $dest") if ($debug);

			}
		}
	}
}

sub hup_handler {
	syslog(LOG_DEBUG, "HUP received") if ($debug);
	my $new = Config::Simple->new($file)->hashref;
	if (!check_config($new)) {
		syslog(LOG_CRIT, "Configuration is invalid");

	} else {
		syslog(LOG_WARNING, "Warning: interface has changed, please restart the daemon") if ($new->{'dsd.interface'} ne $config->{'dsd.interface'});

		$config = $new;
		syslog(LOG_INFO, "Config reloaded from $file");

	}
}

sub check_config {
	my $config = shift;
	return (
		(int($config->{'dsd.interval'}) eq $config->{'dsd.interval'} && $config->{'dsd.interval'}  > 0) &&
		(int($config->{'dsd.sample'})   eq $config->{'dsd.sample'}   && $config->{'dsd.sample'} > 0) &&
		(defined($config->{'dsd.zones'})) &&
		(length($config->{'dsd.directory'}) > 0)
	);
}

sub init_stats {
	$stats = {
		'start' => time(),
		'host' => hostname(),
	};
}

sub get_zones {
	return (ref($config->{'dsd.zones'}) eq 'ARRAY' ? @{$config->{'dsd.zones'}} : split(',', $config->{'dsd.zones'}));
}

__END__

=head1 NAME

DSD - A Simple DNS Statistics Collecting Daemon

=head1 DESCRIPTION

C<dsd> is a daemon which runs on a DNS server and uses libpcap, L<Net::DNS> and
L<NetPacket> to analyse incoming DNS queries. It will periodically write data
files to disk.

=head1 USAGE

	dsd [OPTIONS]

=head1 OPTIONS

=over

=item --config=FILE

Specify config file. Defaults to /etc/dsd/dsd.conf.

=item --foreground

Don't daemonise.

=item --debug

Enable debugging. Implies --foreground.

=item --debug-queries

Include DNS queries observed in debugging output. Ignored unless --debug is
used.

=item --help

Show help.

=back

=head1 CONFIGURATION OPTIONS

	[dsd]

	; interface to capture packets on
	interface=eth0

	; capture 1/sample packets
	sample=1

	; dump data every interval seconds
	interval=300

	; list of zones you're interested in
	zones="foo,bar.com"

	; location to where files are written:
	directory="/var/lib/dsd"

=head1 SEE ALSO

=over

=item C<dsd-cp>, which copies DSD data files from the DNS server to a remote server.

=item C<dsd-db>, which processes DSD data files and writes the data to a database.

=item C<dsd-munin>, a Munin plugin for displaying graphs based on the DSD database.

=item L<https://www.centralnic.com/>

=item L<http://www.net-dns.org/>

=item L<http://dns.measurement-factory.com/tools/dsc/>

=item L<http://munin-monitoring.org/>

=back

=head1 COPYRIGHT

dsd is Copyright 2014 CentralNic Ltd. All rights reserved. This program is free
software; you can redistribute it and/or modify it under the same terms as Perl
itself.

=cut
